'''
Задача 3. Модуль для нахождения уникальных для обоих списков
элементов
Создайте модуль с функцией, которая принимает два списка и возвращает
список, содержащий только элементы, которые уникальны для обоих списков.
Подсказка № 1
Преобразуйте оба списка в множества с помощью функции set(). Это позволит легко
выполнять операции над уникальными элементами.
Подсказка № 2
Используйте операции над множествами для нахождения элементов, которые
уникальны для каждого из множества. set1 - set2 даст элементы, которые
присутствуют в set1, но отсутствуют в set2. Аналогично, set2 - set1 даст
элементы, присутствующие в set2, но отсутствующие в set1.
Подсказка № 3
Объедините два результата (set1 - set2 и set2 - set1) с помощью операции |
(объединение множеств), чтобы получить все уникальные элементы.
Подсказка № 4
Преобразуйте множество уникальных элементов обратно в список с помощью функции
list(), чтобы вернуть результат в виде списка.
'''
def find_unique_elements(list1, list2):
   # Преобразуем оба списка в множества
   set1 = set(list1)
   set2 = set(list2)

# Находим элементы, уникальные для каждого множества
   unique_to_set1 = set1 - set2
   unique_to_set2 = set2 - set1

# Объединяем результаты
   unique_elements = unique_to_set1 | unique_to_set2

# Преобразуем множество обратно в список и возвращаем результат
   return list(unique_elements)

# Пример использования функции
list1 = [1, 2, 3, 4, 5]
list2 = [4, 5, 6, 7, 8]
print(find_unique_elements(list1, list2))  # Вывод: [1, 2, 3, 6, 7, 8]
'''
Этот код преобразует оба списка в множества, находит элементы, уникальные для каждого множества, объединяет их и возвращает результат в виде списка. Например, для списков [1, 2, 3, 4, 5] и [4, 5, 6, 7, 8] результат будет [1, 2, 3, 6, 7, 8].
'''