'''
Задача 2. Замедление кода
В программировании иногда возникает ситуация, когда работу функции нужно
замедлить. Типичный пример — функция, которая постоянно проверяет,
изменились ли данные на веб-странице или её код.
Реализуйте декоратор, который перед выполнением декорируемой функции
ждёт несколько секунд.
Подсказка № 1
Используйте функцию sleep из модуля time для задержки выполнения. Функция sleep
позволяет приостановить выполнение текущего потока на указанное количество
секунд.
Подсказка № 2
Убедитесь, что в функции sleep передается число секунд. Время ожидания должно
быть указано в секундах. Если необходимо, преобразуйте время в секунды (например,
2000 миллисекунд = 2 секунды).
'''

import time
import functools

def slow_down(seconds):
   def decorator(func):
      
      @functools.wraps(func)
      def wrapper(*args, **kwargs):
         print(f"Ждем {seconds} секунд...")
         time.sleep(seconds)
         return func(*args, **kwargs)
      return wrapper
   return decorator

@slow_down(3)
def test():
   print("<Тут что-то происходит...>")

# Проверим работу декоратора
test()

#В этом примере декоратор slow_down принимает количество секунд в качестве аргумента и задерживает выполнение декорируемой функции на указанное время. Когда вы запустите этот код, он сначала подождет 3 секунды, а затем выполнит функцию test.