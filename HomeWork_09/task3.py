'''
Задача 3. Счётчик
Реализуйте декоратор counter, считающий и выводящий количество вызовов
декорируемой функции.
Для решения задачи нельзя использовать операторы global и nonlocal.
Пример: Из файла products.json нужно создать products.csv.
Подсказка № 1
Создайте атрибут обертки для хранения счетчика. Добавьте переменную `count`
непосредственно в функцию-обертку, чтобы она могла отслеживать количество
вызовов без использования глобальных переменных.
Подсказка № 2
Инициализируйте счетчик по умолчанию. Перед возвратом обертки, установите
`wrapper.count = 0`, чтобы счетчик начинал отсчет с нуля при каждом новом
декорировании функции.
Подсказка № 3
Увеличивайте счетчик при каждом вызове обертки. Внутри функции-обертки
увеличивайте значение атрибута `wrapper.count` на единицу каждый раз, когда
вызывается декорируемая функция.
Подсказка № 4
Используйте `functools.wraps` для сохранения метаданных функции. К применению
декоратора добавьте `@wraps(func)` к функции-обертке, чтобы сохранить
оригинальные имя и документацию декорируемой функции.
Подсказка № 5
Выводите количество вызовов функции после ее выполнения. После вызова
декорируемой функции в обертке добавьте вывод, который покажет, сколько раз
функция была вызвана до текущего момента.
'''

import functools

def counter(func):
   @functools.wraps(func)
   def wrapper(*args, **kwargs):
      wrapper.count += 1
      result = func(*args, **kwargs)
      print(f"Функция {func.__name__} была вызвана {wrapper.count} раз(а).")
      return result
   wrapper.count = 0
   return wrapper

@counter
def test():
   print("<Тут что-то происходит...>")

# Проверим работу декоратора
test()
test()
test()

# В этом примере декоратор counter добавляет атрибут count к функции-обертке, который отслеживает количество вызовов функции. Каждый раз, когда вызывается декорируемая функция, счетчик увеличивается на единицу, и после выполнения функции выводится количество вызовов.