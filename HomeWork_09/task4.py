'''
Задача 4. Кэширование для ускорения вычислений
Создайте декоратор, который кэширует (сохраняет для дальнейшего использования)
результаты вызова функции и, при повторном вызове с теми же аргументами,
возвращает сохранённый результат.
Примените его к рекурсивной функции вычисления чисел Фибоначчи.
В итоге декоратор должен проверять аргументы, с которыми вызывается функция, и,
если такие аргументы уже использовались, должен вернуть сохранённый результат
вместо запуска расчёта.
Подсказка № 1
Используйте словарь для хранения кэшированных результатов. Создайте словарь
внутри декоратора для хранения результатов вызова функции с определёнными
аргументами. Это позволит быстро проверять, были ли уже вычислены результаты для
этих аргументов.
Подсказка № 2
Внутри функции-обертки проверьте, содержится ли результат для текущих аргументов
в словаре кэша. Если результат есть, верните его, иначе вызовите декорируемую
функцию и сохраните результат в кэш.
Подсказка № 3
Используйте csv.DictWriter для записи данных в новый CSV файл. Запишите итоговые
данные в новый файл, указывая заголовки столбцов и записывая итоговую выручку
для каждого продукта.
Подсказка № 4
Примените декоратор к рекурсивной функции вычисления чисел Фибоначчи.
Используйте декоратор для функции, вычисляющей числа Фибоначчи. Убедитесь, что
кэширование работает корректно, чтобы избежать повторных вычислений.
'''

import functools

def cache(func):
   cache_dict = {}
   

   @functools.wraps(func)
   def wrapper(*args):
      if args in cache_dict:
         return cache_dict[args]
      result = func(*args)
      cache_dict[args] = result
      return result

   return wrapper

@cache
def fibonacci(n):
   if n < 2:
      return n
   return fibonacci(n-1) + fibonacci(n-2)

# Проверим работу декоратора
print(fibonacci(10))  # Должно вернуть 55
print(fibonacci(20))  # Должно вернуть 6765
print(fibonacci(30))  # Должно вернуть 832040

# В этом примере декоратор cache использует словарь cache_dict для хранения результатов вызова функции с определёнными аргументами. Если результат для текущих аргументов уже есть в словаре, он возвращается сразу, иначе вызывается декорируемая функция и результат сохраняется в кэш.