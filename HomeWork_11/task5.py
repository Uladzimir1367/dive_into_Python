'''
Задача 5. Абстрактный класс
Вы работаете в компании, занимающейся разработкой программного обеспечения
для архитектурных проектов. Вам необходимо разработать программу для расчёта
площади различных геометрических фигур, таких как круги, прямоугольники и
треугольники.
Задача
Создайте:
● класс Shape, который будет базовым классом для всех фигур и будет
хранить пустой метод area, который наследники должны переопределить;
● класс Circle;
● класс Rectangle;
● класс Triangle.
Классы Circle, Rectangle и Triangle наследуют от класса Shape и реализуют метод
для вычисления площади фигуры.
Дополнительно: изучите информацию о работе с абстрактными классами.
На основе этой информации сделайте так, чтобы:
1. Нельзя было создавать объекты класса Shape.
2. Наследники класса Shape переопределяли его метод area, чтобы объекты
этих классов можно было использовать.
Подсказка № 1
Используйте модуль abc для создания абстрактных классов. Импортируйте класс ABC
и декоратор abstractmethod из модуля abc, чтобы сделать ваш базовый класс
абстрактным и определить абстрактные методы, которые должны быть реализованы в
дочерних классах.
Подсказка № 2
Переопределите метод area в дочерних классах. Убедитесь, что каждый из
классов-наследников (Circle, Rectangle, Triangle) реализует метод area, который
рассчитывает площадь фигуры в соответствии с её формулой.
Подсказка № 3
Не создавайте экземпляры абстрактного класса. Попробуйте создать экземпляр класса
Shape, чтобы убедиться, что это невозможно из-за его абстрактности.
'''

from abc import ABC, abstractmethod
import math

class Shape(ABC):
   @abstractmethod
   def area(self):
      pass

class Circle(Shape):
   def __init__(self, radius):
      self.radius = radius

   def area(self):
      return math.pi * (self.radius ** 2)

class Rectangle(Shape):
   def __init__(self, width, height):
      self.width = width
      self.height = height

   def area(self):
      return self.width * self.height

class Triangle(Shape):
   def __init__(self, base, height):
      self.base = base
      self.height = height

   def area(self):
      return 0.5 * self.base * self.height

# Пример использования
shapes = [
Circle(5),
Rectangle(4, 6),
Triangle(3, 7)
]

for shape in shapes:
   print(f"Площадь {shape.__class__.__name__}: {shape.area()}")

'''
В этом коде:

1. Мы создаем абстрактный класс Shape с абстрактным методом area.
2. Классы Circle, Rectangle и Triangle наследуют от Shape и реализуют метод area для вычисления площади соответствующей фигуры.
3. Мы создаем несколько объектов этих классов и вычисляем их площади.

Попробуйте создать экземпляр класса Shape, чтобы убедиться, что это невозможно:

# Это вызовет ошибку
# shape = Shape()a
'''